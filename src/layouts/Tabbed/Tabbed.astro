---
import './Tabbed.css'

interface Props {
  titles: string[]
}

const { titles } = Astro.props
---

<article class="cmp-tabbed">
  <header>
    <div class="nav">
      <span class="bg-indicator bg"></span>
      <fieldset>
        {
          titles.map((title, index) => (
            <label>
              <input type="radio" name="sections" checked={index === 0} />
              {title}
            </label>
          ))
        }
      </fieldset>
    </div>
    <span class="line"></span>
  </header>
  <div class="slider">
    <slot />
  </div>
</article>

<script>
  import { $$, asRem } from '@/tools'

  const ACTIVE_CLASS = 'active'
  const INIT_INDEX = 0

  const tabbeds = $$('.cmp-tabbed')

  tabbeds.forEach(tabbed => {
    const slider = tabbed.querySelector<HTMLElement>('.slider')
    const indicator = tabbed.querySelector<HTMLElement>('.bg-indicator')

    if (!slider || !indicator) return

    const labels = tabbed.querySelectorAll('label')
    const sections = Array.from<HTMLElement>(slider.querySelectorAll('& > *'))
    const radios = tabbed.querySelectorAll<HTMLInputElement>(
      'input[type="radio"]'
    )

    const moveIndicator = (index: number) => {
      const label = labels[index]
      const labelRect = label.getBoundingClientRect()

      indicator.style.left = asRem(label.offsetLeft)
      indicator.style.width = asRem(labelRect.width)
    }

    // Inicializar
    let sectionActive = sections[INIT_INDEX]
    sectionActive.classList.add(ACTIVE_CLASS)
    moveIndicator(INIT_INDEX)

    // TODO: desactivar los radios mientras se esten produciendo las transisiones

    radios.forEach((radio, index) => {
      radio.onchange = () => {
        const newSectionActive = sections[index]

        sectionActive.ontransitionend = () => {
          sectionActive.ontransitionend = null

          newSectionActive.classList.add(ACTIVE_CLASS)
          sectionActive = newSectionActive
        }

        sectionActive.classList.remove(ACTIVE_CLASS)
        moveIndicator(index)
      }
    })

    const resizeObserver = new ResizeObserver(() => {
      const maxHeight = Math.max(...sections.map(item => item.clientHeight))
      slider.style.height = asRem(maxHeight)
    })

    resizeObserver.observe(slider)

    // TODO: controlar tambien el resize de los items
  })
</script>
