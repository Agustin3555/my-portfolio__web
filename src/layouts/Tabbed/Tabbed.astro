---
import './Tabbed.css'

interface Props {
  id: string
  titles: string[]
}

const { id, titles } = Astro.props
---

<article class="cmp-tabbed">
  <header>
    <div class="nav">
      <span class="bg-indicator bg"></span>
      <fieldset>
        {
          titles.map((title, index) => (
            <label>
              <input
                type="radio"
                name={`${id}-sections`}
                checked={index === 0}
              />
              {title}
            </label>
          ))
        }
      </fieldset>
    </div>
    <span class="line"></span>
  </header>
  <div class="slider">
    <slot />
  </div>
</article>

<script>
  import { $$, asRem, onPageLoad } from '@/tools'

  onPageLoad(() => {
    const ACTIVE_CLASS = 'active'
    const INIT_INDEX = 0

    const tabbeds = $$('.cmp-tabbed')

    tabbeds.forEach(tabbed => {
      const slider = tabbed.querySelector<HTMLElement>('.slider')
      const indicator = tabbed.querySelector<HTMLElement>('.bg-indicator')

      if (!slider || !indicator) return

      const labels = tabbed.querySelectorAll('label')

      const sections = Array.from<HTMLElement>(
        slider.querySelectorAll('& > *:not(script)')
      )

      const radios = tabbed.querySelectorAll<HTMLInputElement>(
        'input[type="radio"]'
      )

      console.log(sections)

      const moveIndicator = (index: number) => {
        const label = labels[index]
        const labelRect = label.getBoundingClientRect()

        indicator.style.left = asRem(label.offsetLeft)
        indicator.style.width = asRem(labelRect.width)
      }

      // Inicializar
      let sectionActive = sections[INIT_INDEX]
      sectionActive.classList.add(ACTIVE_CLASS)
      moveIndicator(INIT_INDEX)

      // TODO: desactivar los radios mientras se estÃ©n produciendo las transiciones

      radios.forEach((radio, index) => {
        radio.onchange = () => {
          const newSectionActive = sections[index]

          sectionActive.ontransitionend = () => {
            sectionActive.ontransitionend = null

            newSectionActive.classList.add(ACTIVE_CLASS)
            sectionActive = newSectionActive
          }

          sectionActive.classList.remove(ACTIVE_CLASS)
          moveIndicator(index)
        }
      })

      // Control de altura global

      const sectionHeights: number[] = []

      sections.forEach((section, index) => {
        const resizeObserver = new ResizeObserver(() => {
          const newHeight = section.clientHeight

          // Solo actualizar si el valor es diferente
          if (sectionHeights[index] !== newHeight) {
            const value = sectionHeights.map(asRem).join(', ')
            slider.style.setProperty('--section-heights', value)

            sectionHeights[index] = newHeight
          }
        })

        resizeObserver.observe(section)
      })
    })
  })
</script>
