---
import '@/styles/index.css'
import '@fontsource-variable/plus-jakarta-sans'
import '@fontsource-variable/dm-sans'

import './Page.css'
import Head, { type Props as HeadProps } from './components/Head/Head.astro'
import Background from './components/Background/Background.astro'
import Footer from './components/Footer/Footer.astro'
import Nav from './components/Nav/Nav.astro'

interface Props {
  head: HeadProps
}

const { head } = Astro.props
---

<html lang="en">
  <Head {...head} />
  <body>
    <Background />
    <div class="layout">
      <div class="content">
        <main>
          <slot />
        </main>
        <Footer />
      </div>
      <Nav />
    </div>
  </body>
</html>

<script>
  import { darkModeEntity } from '@/services'
  import { onPageLoad } from '@/tools'
  import { bodyManager } from '@/tools/elementManagers.tool'

  onPageLoad(() => {
    const DEFAULT_DARK_MODE = true

    const darkModeInit = () => {
      // Si existe la entidad en local storage, se la utiliza
      const darkModeValue = darkModeEntity.get()
      if (darkModeValue !== null) return darkModeValue

      // Si existe la media del usuario, se la utiliza
      if (window.matchMedia)
        return window.matchMedia('(prefers-color-scheme: dark)').matches

      // Si no, se crea la entidad en local storage y se la utiliza
      darkModeEntity.set(DEFAULT_DARK_MODE)
      return DEFAULT_DARK_MODE
    }

    bodyManager.data.darkMode.set(String(darkModeInit()))
  })
</script>

<script>
  import { onPageLoad } from '@/tools'

  const root = window.document.documentElement

  /*
    Desactiva el desplazamiento 'smooth' del scroll mientras se esta
    produciendo la View Transition, con el objetivo acelerar la UX y no
    entorpecer a la transiciÃ³n.
  */
  document.addEventListener('astro:before-preparation', () => {
    root.style.scrollBehavior = 'initial'
  })

  onPageLoad(() => {
    root.style.scrollBehavior = 'smooth'
  })
</script>
