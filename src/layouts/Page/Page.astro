---
import "@/styles/normalize.css";
import "@/styles/palette.css";
import "@/styles/vars.css";
import "@/styles/style.css";
import "@fontsource-variable/onest";
import "@fontsource-variable/roboto-mono";

import * as PageStyled from "./Page.styled";
import SplashToScrollUp from "./components/SplashToScrollUp/SplashToScrollUp.astro";
import Background from "./components/Background/Background.astro";
import Footer from "./components/Footer/Footer.astro";
import Menu from "./components/Menu/Menu.astro";
import LeftNav from "./components/LeftNav/LeftNav.astro";
import jsonData from "@/data.json";

interface Props {
  subtitle?: string;
}

const { subtitle } = Astro.props;

const { title, desc } = jsonData.documentInfo;
const { base, separator } = title;

let fullTitle = base;

if (subtitle) fullTitle += ` ${separator} ${subtitle}`;
---

<html lang="en">
  <head>
    <!-- TODO: completar para el SEO -->

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="robots" content="index, follow" />
    <link rel="canonical" href="https://juan-agustin-lovera.netlify.app/" />

    <meta name="theme-color" content="#eb5547" />

    <link rel="icon" href="/favicon-logo-s.ico" />
    <title>{fullTitle}</title>
    <meta name="description" content={desc} />
  </head>
  <body data-social-nets-location="true">
    <SplashToScrollUp />
    <Background />
    <PageStyled.Component>
      <div class="static">
        <main>
          <slot />
        </main>
        <Footer />
      </div>
      <Menu />
      <LeftNav />
    </PageStyled.Component>
  </body>
</html>

<script is:inline src="https://kit.fontawesome.com/7463805de7.js"></script>

<script>
  import { bodyManager } from "@/tools/elementManagers.tool";
  import { darkModeEntity } from "@/services";

  const DEFAULT_DARK_MODE = true;

  const darkModeInit = () => {
    // Si existe la entidad en local storage, se la utiliza
    const darkModeValue = darkModeEntity.get();
    if (darkModeValue !== null) return darkModeValue;

    // Si existe la media del usuario, se la utiliza
    if (window.matchMedia)
      return window.matchMedia("(prefers-color-scheme: dark)").matches;

    // Si no, se crea la entidad en local storage y se la utiliza
    darkModeEntity.set(DEFAULT_DARK_MODE);
    return DEFAULT_DARK_MODE;
  };

  bodyManager.data.darkMode.set(String(darkModeInit()));
</script>

<script>
  const adaptables =
    window.document.querySelectorAll<HTMLElement>(".adaptable");

  adaptables.forEach((adaptable) => {
    const content = adaptable.querySelector("& > *");

    const resizeObserver = new ResizeObserver((entries) => {
      if (entries.length > 0) {
        const { width, height } = entries[0].contentRect;

        adaptable.style.setProperty("--content-width", `${width}px`);
        adaptable.style.setProperty("--content-height", `${height}px`);
      }
    });

    content && resizeObserver.observe(content);
  });
</script>
