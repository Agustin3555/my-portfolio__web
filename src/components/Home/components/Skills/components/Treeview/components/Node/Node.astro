---
import * as NodeStyled from "./Node.styled";
import { Image } from "astro:assets";
import Separator, {
  type Props as SeparatorProps,
} from "@/components/Separator/Separator.astro";
import { FONT_SIZE, VARS } from "@/styles";
import { asClassName } from "@/tools";
import {
  getImgMetadata,
  validateImgMetadata,
  type Folder,
} from "@/tools/getImgMetadata.tool";

interface DataNode {
  items: {
    name: string;
    file: string;
    invertInBrightMode?: boolean;
    invertInDarkMode?: boolean;
  }[];
  skillLevel: number;
  techs?: DataNode[];
}

interface Props {
  dataNode: DataNode;
  level?: number;
}

const { dataNode, level = 0 } = Astro.props;
const { items, skillLevel, techs } = dataNode;

const folder: Folder = "skills";

items.forEach(({ file }) => validateImgMetadata(folder, file));

const separatorProps: SeparatorProps = {
  style: {
    invert: true,
    long: FONT_SIZE.xs,
    color: {
      light: VARS.color.a.line.light,
      dark: VARS.color.a.line.dark,
    },
  },
};
---

<NodeStyled.Component>
  <div
    class="tech"
    style={`
      --node-level: ${level};
      opacity: var(--level-${skillLevel - 1}-opacity);
    `}
  >
    <div class="names">
      {
        items.map(({ name }, index) => (
          <>
            <p class="name">{name}</p>
            {index !== items.length - 1 && <Separator {...separatorProps} />}
          </>
        ))
      }
    </div>
    <div class="graphics">
      <div class="icons">
        {
          items.map(({ name, file, invertInDarkMode }, index) => (
            <>
              <Image
                class={asClassName(
                  "icon",
                  invertInDarkMode ? "invert-in-dark-mode" : "",
                )}
                src={getImgMetadata(folder, file)()}
                alt={`Logo de ${name}`}
              />
              {index !== items.length - 1 && <Separator {...separatorProps} />}
            </>
          ))
        }
      </div>
      <div class="level-bar">
        <span class="bar" style={{ width: `${(skillLevel / 3) * 100}%` }}
        ></span>
      </div>
    </div>
  </div>
  {
    techs && (
      <ul class="techs-children">
        {techs.map((tech) => (
          <li>
            <span class="bullet-point">
              <span class="box" />
              <span class="line" />
            </span>
            <Astro.self dataNode={tech} level={level + 1} />
          </li>
        ))}
      </ul>
    )
  }
</NodeStyled.Component>
