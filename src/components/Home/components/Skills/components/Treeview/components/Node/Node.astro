---
import * as NodeStyled from "./Node.styled";
import Separator from "@/components/Separator/Separator.astro";
import { COLOR, FONT_SIZE } from "@/styles";
import { asClassName } from "@/tools";

interface DataNode {
  names: string[];
  icons: {
    fileName: string;
    invertInBrightMode?: boolean;
    invertInDarkMode?: boolean;
  }[];
  skillLevel: number;
  technologies?: DataNode[];
}

interface Props {
  dataNode: DataNode;
  level?: number;
}

const { dataNode, level = 0 } = Astro.props;
const { names, icons, skillLevel, technologies } = dataNode;
---

<!-- TODO: semantica HTML -->
<NodeStyled.Component>
  <div class={`tech skill-level-${skillLevel}`} style={`--level: ${level};`}>
    <div class="names">
      {
        names.map((name, index) => (
          <>
            <div class="name">{name}</div>
            {index !== names.length - 1 && (
              <Separator
                style={{
                  invert: true,
                  long: FONT_SIZE.xs,
                  backgroundColor: { dark: COLOR.gs_10 },
                }}
              />
            )}
          </>
        ))
      }
    </div>
    <div class="graphics">
      <div class="icons">
        {
          icons.map((icon, index) => (
            <>
              <img
                class={asClassName(
                  "icon",
                  icon?.invertInDarkMode ? "invert-in-dark-mode" : "",
                )}
                src={`/skills/${icon.fileName}`}
                alt={`Logo de ${names[index]}`}
              />
              {index !== names.length - 1 && (
                <Separator
                  style={{
                    invert: true,
                    long: FONT_SIZE.xs,
                    backgroundColor: { dark: COLOR.gs_10 },
                  }}
                />
              )}
            </>
          ))
        }
      </div>
      <div class="level-bar">
        <div class="bar" style={{ width: `${((skillLevel + 1) / 3) * 100}%` }}>
        </div>
      </div>
    </div>
  </div>
  {
    technologies && (
      <ul class="child-tech">
        {technologies?.map((item, index) => (
          <li class="item">
            <div class="child-group">
              <div class="bullet-point-container">
                <div class="box" />
                {index !== technologies?.length - 1 && (
                  <div class="next-extension line" />
                )}
              </div>
              <Astro.self dataNode={item} level={level + 1} />
            </div>
            {index !== technologies?.length - 1 && (
              <div class="extension-container">
                <div class="extension line" />
              </div>
            )}
          </li>
        ))}
      </ul>
    )
  }
</NodeStyled.Component>
