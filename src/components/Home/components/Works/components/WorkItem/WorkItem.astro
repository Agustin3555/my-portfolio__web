---
import * as WorkItemStyled from "./WorkItem.styled";
import ImgsSlider from "../../../ImgsSlider/ImgsSlider.astro";
import ExternalLink from "@/components/ExternalLink/ExternalLink.astro";
import Separator from "@/components/Separator/Separator.astro";
import GlassPanel from "@/layouts/GlassPanel/GlassPanel.astro";
import { COLOR, NOT_FONT_SIZE } from "@/styles";
import { highlightToHTMLTag } from "@/tools";
import { type Props as ExternalLinksProps } from "@/components/ExternalLink/ExternalLink.astro";

type HostingPlatform = "github" | "gitlab" | "bitbucket";

interface Props {
  title: string;
  types: string[];
  desc: string;
  technologies: string[];
  imgs: {
    file: string;
    alt: string;
  }[];
  sliderAspectRatio?: string;
  links?: {
    repo?: {
      url: string;
      host: HostingPlatform;
    };
    others?: {
      url: string;
      text: string;
      title: string;
    }[];
  };
}

const { title, types, desc, technologies, imgs, sliderAspectRatio, links } =
  Astro.props;

let externalLinks: ExternalLinksProps[] = [];

if (links) {
  const { repo, others } = links;

  const BY_HOST: Record<HostingPlatform, { icon: string; name: string }> = {
    github: { icon: "github", name: "GitHub" },
    gitlab: { icon: "gitlab", name: "GitLab" },
    bitbucket: { icon: "bitbucket", name: "Bitbucket" },
  };

  if (repo) {
    const { icon, name } = BY_HOST[repo.host];

    externalLinks = [
      {
        url: repo.url,
        iconName: `fa-brands fa-${icon}`,
        text: "Repositorio",
        title: `Ir al repositorio en ${name}`,
      },
    ];
  }

  if (others)
    externalLinks = [
      ...externalLinks,
      ...others.map<ExternalLinksProps>(({ url, text, title }) => ({
        url,
        iconName: "fa-solid fa-square-arrow-up-right",
        text,
        title,
      })),
    ];
}
---

<WorkItemStyled.Component>
  <ImgsSlider
    folder="works"
    imgs={imgs}
    style={{
      aspectRatio: sliderAspectRatio,
      borderRadius: NOT_FONT_SIZE["2xs"],
    }}
    handlingClass={["slider"]}
  />
  <header>
    <GlassPanel
      style={{
        padding: NOT_FONT_SIZE.s,
        borderRadius: NOT_FONT_SIZE["2xs"],
      }}
    >
      <div class="header-content">
        <h3 class="text">{title}</h3>
        <ul class="types">
          {
            types.map((item, index) => (
              <>
                <li>
                  <p class="text">{item}</p>
                </li>
                {index !== types.length - 1 && (
                  <Separator
                    style={{
                      invert: true,
                      long: NOT_FONT_SIZE["2xs"],
                      backgroundColor: { dark: COLOR.gs_10 },
                    }}
                  />
                )}
              </>
            ))
          }
        </ul>
      </div>
    </GlassPanel>
  </header>
  <ul class="techs">
    {
      technologies.map((item) => (
        <li>
          <p>
            {item} <small>1.0.0</small>
          </p>
        </li>
      ))
    }
  </ul>
  <p set:html={highlightToHTMLTag(desc)} class="desc text" />
  <ul class="links">
    {
      externalLinks.map((item) => (
        <li>
          <ExternalLink {...item} />
        </li>
      ))
    }
  </ul>
</WorkItemStyled.Component>
