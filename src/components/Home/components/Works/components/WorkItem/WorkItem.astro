---
import * as WorkItemStyled from "./WorkItem.styled";
import { Image } from "astro:assets";
import Slider from "../../../Slider/Slider";
import ExternalLink from "@/components/ExternalLink/ExternalLink.astro";
import Separator from "@/components/Separator/Separator.astro";
import GlassPanel from "@/layouts/GlassPanel/GlassPanel.astro";
import { COLOR, NOT_FONT_SIZE } from "@/styles";
import { type Props as ExternalLinksProps } from "@/components/ExternalLink/ExternalLink.astro";
import { highlightToHTMLTag } from "@/tools";

interface Props {
  title: string;
  types: string[];
  desc: string;
  technologies: string[];
  imgs: {
    src: ImageMetadata;
    alt: string;
  }[];
  sliderAspectRatio?: number[];
  links?: {
    srcCode?: {
      url: string;
      host: string;
    };
    others?: {
      url: string;
      text: string;
      title?: string;
    }[];
  };
}

const { title, types, desc, technologies, imgs, sliderAspectRatio, links } =
  Astro.props;

let externalLinks: ExternalLinksProps[] = [];

if (links) {
  const { srcCode, others } = links;

  if (srcCode)
    externalLinks = [
      {
        url: srcCode.url,
        iconName: "fa-solid fa-file-code",
        text: "Repositorio",
        title: `Ir al repositorio en ${srcCode.host}`,
      },
    ];

  if (others)
    externalLinks = [
      ...externalLinks,
      ...others.map<ExternalLinksProps>((item) => ({
        url: item.url,
        iconName: "fa-solid fa-square-arrow-up-right",
        text: item.text,
        title: item.title,
      })),
    ];
}
---

<WorkItemStyled.Component>
  <Slider
    client:load
    picturesLength={imgs.length}
    style={{ aspectRatio: sliderAspectRatio }}
    handlingClass={["slider"]}
  >
    {imgs.map((item) => <Image {...item} />)}
  </Slider>
  <header>
    <GlassPanel
      style={{
        padding: NOT_FONT_SIZE.s,
        borderRadius: NOT_FONT_SIZE["2xs"],
      }}
    >
      <div class="header-content">
        <h3 class="text">{title}</h3>
        <ul class="types">
          {
            types.map((item, index) => (
              <>
                <li>
                  <p class="text">{item}</p>
                </li>
                {index !== types.length - 1 && (
                  <Separator
                    style={{
                      invert: true,
                      long: NOT_FONT_SIZE["2xs"],
                      backgroundColor: { dark: COLOR.gs_10 },
                    }}
                  />
                )}
              </>
            ))
          }
        </ul>
      </div>
    </GlassPanel>
  </header>
  <ul class="techs">
    {
      technologies.map((item) => (
        <li>
          <p>
            {item} <small>1.0.0</small>
          </p>
        </li>
      ))
    }
  </ul>
  <p set:html={highlightToHTMLTag(desc)} class="desc text" />
  <ul class="links">
    {
      externalLinks.map((item) => (
        <li>
          <ExternalLink {...item} />
        </li>
      ))
    }
  </ul>
</WorkItemStyled.Component>
