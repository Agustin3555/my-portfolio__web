---
import * as ImgsSliderStyled from "./ImgsSlider.styled";
import { Image } from "astro:assets";
import Icon from "@/components/Icon/Icon.astro";
import ScrollIndicator from "@/components/ScrollIndicator/ScrollIndicator.astro";
import { FONT_SIZE } from "@/styles";
import { type HandlingClass, asClassName } from "@/tools";
import {
  getImgMetadata,
  validateImgMetadata,
  type Folder,
} from "@/tools/getImgMetadata.tool";

interface Props {
  folder: Folder;
  imgs: { file: string; alt: string }[];
  eager?: boolean;
  style?: ImgsSliderStyled.Props;
  handlingClass?: HandlingClass;
}

const {
  folder,
  imgs,
  eager = false,
  style = {},
  handlingClass = [],
} = Astro.props;

imgs.forEach(({ file }) => validateImgMetadata(folder, file));
---

<ImgsSliderStyled.Component
  className={asClassName("slider", ...handlingClass)}
  p={ImgsSliderStyled.adapter(style)}
>
  <ol class="imgs">
    {
      imgs.map(({ file, alt }) => (
        <li>
          <span>
            <Image
              class="background"
              src={getImgMetadata(folder, file)()}
              alt={alt}
              loading={eager ? "eager" : "lazy"}
            />
          </span>
          <Image
            class="image"
            src={getImgMetadata(folder, file)()}
            alt={alt}
            loading={eager ? "eager" : "lazy"}
          />
        </li>
      ))
    }
  </ol>
  <div class="controls">
    <ScrollIndicator handlingClass={["scroll-indicator"]} />
    <p class="position-counter"><strong>1</strong> / {imgs.length}</p>
    <button class="toggle-fullscreen" title="Ver en pantalla completa">
      <Icon
        iconName="fa-solid fa-compress"
        style={{ size: FONT_SIZE.m }}
        handlingClass={["compress"]}
      />
      <Icon
        iconName="fa-solid fa-expand"
        style={{ size: FONT_SIZE.m }}
        handlingClass={["expand"]}
      />
    </button>
  </div>
</ImgsSliderStyled.Component>

<script>
  import { onScreen } from "@/tools";

  const sliders = window.document.querySelectorAll<HTMLDivElement>(".slider");

  sliders.forEach((slider) => {
    // Sobre el fullscreen

    const FULLSCREEN_DS_KEY = "fullscreen";

    slider.dataset[FULLSCREEN_DS_KEY] = String(false);

    const toggleFullscreen =
      slider.querySelector<HTMLButtonElement>(".toggle-fullscreen");

    if (toggleFullscreen) {
      toggleFullscreen.addEventListener("click", async () => {
        const fullscreen = slider.dataset[FULLSCREEN_DS_KEY] === "true";
        const reverseFullscreen = !fullscreen;

        slider.dataset[FULLSCREEN_DS_KEY] = String(reverseFullscreen);

        if (reverseFullscreen) {
          toggleFullscreen.title = "Salir de pantalla completa";
          await slider.requestFullscreen();
        } else {
          toggleFullscreen.title = "Ver en pantalla completa";
          await window.document.exitFullscreen();
        }
      });

      window.document.addEventListener("fullscreenchange", () => {
        if (!window.document.fullscreenElement) {
          slider.dataset[FULLSCREEN_DS_KEY] = String(false);

          toggleFullscreen.title = "Ver en pantalla completa";
        }
      });
    }

    // Sobre el position-counter

    const imgContainers = slider.querySelectorAll<HTMLLIElement>("li");

    const positionCounter = slider.querySelector<HTMLElement>(
      ".position-counter strong",
    );

    imgContainers.forEach((item, index) => {
      onScreen({
        observed: item,
        containerObserver: slider,
        margin: "-50%",
        onIntersectionChange: (isIntersecting) => {
          if (isIntersecting && positionCounter)
            positionCounter.innerText = String(index + 1);
        },
      });
    });
  });
</script>
